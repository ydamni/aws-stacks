variables:
  ### AWS
  AWS_REGION: us-east-1
### Project CI/CD variables
# AWS_ACCESS_KEY_ID             - Protected
# AWS_ACCOUNT_ID                - Protected
# AWS_SECRET_ACCESS_KEY         - Protected/Masked
# MYSQL_PASSWORD                - Protected/Masked
# PUBLIC_IP                     - Protected/Masked

stages:
  - prerequisites
  - create
  - destroy

verify state locking:
  stage: prerequisites
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    ### Verify if state-lock table exists (i.e. if state lock applied)
    - aws dynamodb describe-table --table-name aws-stacks-terraform-state-lock
    ### Verify is S3 state storage exists
    - aws s3 ls aws-stacks-terraform-state

apply state locking:
  stage: prerequisites
  needs: ["verify state locking"]
  when: on_failure
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./state-lock
    - terraform init
    - terraform apply -auto-approve

### ###
### Create stage jobs
### ###

create network stack:
  stage: create
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./network
    - terraform init
    - terraform apply -auto-approve

create compute stack:
  stage: create
  needs: ["create network stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  artifacts:
    expire_in: "30 days"
    name: "EC2-SSH-KEY"
    paths:
      - $CI_PROJECT_DIR/compute/aws-stacks-ec2-access-key.pem
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./compute
    ### User data for EC2 inside TF var file
    - |
      cat <<EOF | tee ./main.tfvars
      public_ip = "$PUBLIC_IP"
      user_data = "IyEvYmluL2Jhc2gKIyBTY3JpcHQgZnJvbSBTdGVwaGFuZSBNYWFyZWsgQ291cnNlICh0aGFuayB5b3UgU3RlcGhhbmUpCiMgSW5zdGFsbCBhIHNpbXBsZSB3ZWIgc2VydmVyIHdpdGggaHR0cGQKeXVtIHVwZGF0ZSAteQp5dW0gaW5zdGFsbCAteSBodHRwZApzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKc3lzdGVtY3RsIGVuYWJsZSBodHRwZAplY2hvICI8aDE+SGVsbG8gV29ybGQgZnJvbSAkKGhvc3RuYW1lIC1mKTwvaDE+IiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbAo="
      EOF
    - terraform init
    - terraform apply -var-file=main.tfvars -auto-approve

create containers stack:
  stage: create
  needs: ["create network stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache curl python3 py3-pip openssl
    ### Install awscli
    - pip3 install awscli
    - aws configure set region $AWS_REGION
    ### Install Docker
    - apk add --no-cache docker openrc
    ### Install kubectl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
  script:
    ### ### ECS
    - cd $CI_PROJECT_DIR/containers/ecs
    - |
      cat <<EOF | tee ./main.tfvars
      mysql_root_password = "$MYSQL_PASSWORD"
      EOF
    - terraform init
    - terraform refresh -var-file=main.tfvars
    - terraform apply -var-file=main.tfvars -auto-approve
    ### ### EKS
    ### Create EKS Cluster
    - cd $CI_PROJECT_DIR/containers/eks/cluster
    - terraform init
    - terraform apply -auto-approve
    ### Install EKS kubeconfig file locally
    - aws eks update-kubeconfig --name aws-stacks-eks-cluster
    ### Create Kubernetes objects
    - cd $CI_PROJECT_DIR/containers/eks/objects
    - |
      cat <<EOF | tee ./main.tfvars
      mysql_root_password = "$MYSQL_PASSWORD"
      EOF
    - terraform init
    - terraform refresh -var-file=main.tfvars
    - terraform apply -var-file=main.tfvars -auto-approve

### ###
### Destroy stage jobs
### ###

destroy network stack:
  stage: destroy
  needs: ["create network stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./network
    - terraform init
    - terraform destroy -auto-approve

destroy compute stack:
  stage: destroy
  needs: ["create compute stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./compute
    ### User data for EC2 inside TF var file
    - |
      cat <<EOF | tee ./main.tfvars
      public_ip = "$PUBLIC_IP"
      user_data = "IyEvYmluL2Jhc2gKIyBTY3JpcHQgZnJvbSBTdGVwaGFuZSBNYWFyZWsgQ291cnNlICh0aGFuayB5b3UgU3RlcGhhbmUpCiMgSW5zdGFsbCBhIHNpbXBsZSB3ZWIgc2VydmVyIHdpdGggaHR0cGQKeXVtIHVwZGF0ZSAteQp5dW0gaW5zdGFsbCAteSBodHRwZApzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKc3lzdGVtY3RsIGVuYWJsZSBodHRwZAplY2hvICI8aDE+SGVsbG8gV29ybGQgZnJvbSAkKGhvc3RuYW1lIC1mKTwvaDE+IiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbAo="
      EOF
    - terraform init
    - terraform destroy -var-file=main.tfvars -auto-approve

destroy containers stack:
  stage: destroy
  needs: ["create containers stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache curl python3 py3-pip openssl
    ### Install awscli
    - pip3 install awscli
    - aws configure set region $AWS_REGION
    ### Install Docker
    - apk add --no-cache docker openrc
    ### Install kubectl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
  script:
    ### ### ECS
    - cd $CI_PROJECT_DIR/containers/ecs
    - |
      cat <<EOF | tee ./main.tfvars
      mysql_root_password = "$MYSQL_PASSWORD"
      EOF
    - terraform init
    - terraform refresh -var-file=main.tfvars
    - terraform destroy -var-file=main.tfvars -auto-approve
    ### ### EKS
    ### Install EKS kubeconfig file locally
    - aws eks update-kubeconfig --name aws-stacks-eks-cluster
    ### Destroy Kubernetes objects
    - cd $CI_PROJECT_DIR/containers/eks/objects
    - |
      cat <<EOF | tee ./main.tfvars
      mysql_root_password = "$MYSQL_PASSWORD"
      EOF
    - terraform init
    - terraform refresh -var-file=main.tfvars
    - terraform destroy -var-file=main.tfvars -auto-approve
    ### Destroy EKS Cluster
    - cd $CI_PROJECT_DIR/containers/eks/cluster
    - terraform init
    - terraform destroy -auto-approve
