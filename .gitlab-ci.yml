variables:
  ### AWS
  AWS_REGION: us-east-1
### Project CI/CD variables
# AWS_ACCESS_KEY_ID             - Protected
# AWS_ACCOUNT_ID                - Protected
# AWS_SECRET_ACCESS_KEY         - Protected/Masked
# PUBLIC_IP                     - Protected/Masked

stages:
  - prerequisites
  - stack

verify state locking:
  stage: prerequisites
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    ### Verify if state-lock table exists (i.e. if state lock applied)
    - aws dynamodb describe-table --table-name aws-stacks-terraform-state-lock
    ### Verify is S3 state storage exists
    - aws s3 ls aws-stacks-terraform-state

apply state locking:
  stage: prerequisites
  needs: ["verify state locking"]
  when: on_failure
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./state-lock
    - terraform init
    - terraform apply -auto-approve

create network stack:
  stage: stack
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./network
    - terraform init
    - terraform apply -auto-approve

destroy network stack:
  stage: stack
  needs: ["create network stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./network
    - terraform init
    - terraform destroy -auto-approve

create compute stack:
  stage: stack
  needs: ["create network stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  artifacts:
    expire_in: "30 days"
    name: "EC2-SSH-KEY"
    paths:
      - $CI_PROJECT_DIR/compute/aws-stacks-ec2-access-key.pem
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./compute
    ### User data for EC2 inside TF var file
    - |
      cat <<EOF | tee ./main.tfvars
      public_ip = "$PUBLIC_IP"
      user_data = <<EOT
      #!/bin/bash
      # Script from Stephane Maarek Course (thank you Stephane)
      # Install a simple web server with httpd
      yum update -y
      yum install -y httpd
      systemctl start httpd
      systemctl enable httpd
      echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
      EOT

      EOF
    - terraform init
    - terraform apply -var-file=main.tfvars -auto-approve

destroy compute stack:
  stage: stack
  needs: ["create compute stack"]
  when: manual
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  only:
    - main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./compute
    ### User data for EC2 inside TF var file
    - |
      cat <<EOF | tee ./main.tfvars
      public_ip = "$PUBLIC_IP"
      user_data = <<EOT
      #!/bin/bash
      # Script from Stephane Maarek Course (thank you Stephane)
      # Install a simple web server with httpd
      yum update -y
      yum install -y httpd
      systemctl start httpd
      systemctl enable httpd
      echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
      EOT

      EOF
    - terraform init
    - terraform destroy -var-file=main.tfvars -auto-approve
